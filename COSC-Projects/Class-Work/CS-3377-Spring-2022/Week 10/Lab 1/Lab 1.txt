Task1. Review the shell1.c progroam. Compile and run it.


{cslinux1:~/cs3377/week10/Lab1} vi shell1.c
{cslinux1:~/cs3377/week10/Lab1} gcc shell1.c -o shell1
{cslinux1:~/cs3377/week10/Lab1} ./shell1
$$ whoami
kcb180002
$$ {cslinux1:~/cs3377/week10/Lab1}
{cslinux1:~/cs3377/week10/Lab1} 

Task2. Design and implment shell2.c program  to handle exit command to terminate the program.


{cslinux1:~/cs3377/week10/Lab1} cat shell2.c
/*
 *  shell1.c
 *  simplest shell.
 *     running in loop to read input string (command) to be processed
 *     To exit, type EOF (ctlr+D) or ctlr+C
 */
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sysexits.h>
#include <unistd.h>

char *getinput(char *buffer, size_t buflen)
{
        printf("$$ ");
        return fgets(buffer, buflen, stdin);
}

int main(int argc, char **argv)
{
        char buf[1024];
        pid_t pid;
        int status;

        while (getinput(buf, sizeof(buf))) {
                buf[strlen(buf) - 1] = '\0';
                if(buf[0] == 'e' && buf[1] == 'x' && buf[2] == 'i' && buf[3] == 't')
                        exit(EX_OK);
                if((pid=fork()) == -1) {
                        fprintf(stderr, "shell: can't fork: %s\n",
                                        strerror(errno));
                        continue;
                }
                else if (pid == 0) {
                        /* child */
                        execlp(buf, buf, (char *)0);
                        fprintf(stderr, "shell: couldn't exec %s: %s\n", buf,
                                        strerror(errno));
                        exit(EX_DATAERR);
                }

                if ((pid=waitpid(pid, &status, 0)) < 0)
                        fprintf(stderr, "shell: waitpid error: %s\n",
                                        strerror(errno));
        }
        exit(EX_OK);
}

{cslinux1:~/cs3377/week10/Lab1} gcc shell2.c -o shell2
{cslinux1:~/cs3377/week10/Lab1} ./shell2
$$ exit
{cslinux1:~/cs3377/week10/Lab1}


Task3. Design and implement shell3.c to implement a signal handler to handle ctrlC(SIGINT) as listed below
void sig_int(int signo) {printf("\nCaught SIGINT!\n);}

{cslinux1:~/cs3377/week10/Lab1} vi shell3.c
{cslinux1:~/cs3377/week10/Lab1} gcc shell3.c -o shell3
{cslinux1:~/cs3377/week10/Lab1} ./shell3
$$ ^C
