Kevin Boudreaux
KCB180002

After running the code a few times:

Bubble sort Comparision is around 18.6 Million
Bubble sort item assignment is around 6 Million
The reason why comparision is close to 12 Million more than the item assignment
is because in bubble sort moves one thing at a time and starts from the start of the array
This causes a lot of comparisons while not much reassignments are happening in comparision to each other.

Slection sort comparision is around 12.5 Million
Selection sort item assignment has 5000 swaps
The reason behind the low number of swaps is because of how seleciton sort works
it starts at the first number and finds the lowest number in the entire array and swaps it with the
first number in the array. It then moves to the 2nd spot in the array and looks for the 2nd
lowest number and repeats itself until it reaches the end of the array. 
So at most selection sort has 5000 swaps and at least 0.

Insert sort Comparision is around 12.5 Million 
Insert Sort item assignments is around 6.3 Million
The reason why there are so many comparisons and assignments is because insert sort compares two spots
at a time and if the one on the left is greater than the one on the right it moves it over. This causes
a lot of item reassignments and a lot of comparisons.

Quick sort comparision is around 110,000
Quick sort item assignment is around 43,000
The reason why there are a low number of comparisons and assignments compared to the other types of sorting
is beacuase quick sort uses pivots to compare everything. For example the pivot would be the first number in the list
and every other number is put in front or behind this pivot depending if they are less than or more than
the value of the pivot. Then everything to the left repeats using a new pivot and the same happens to the right
after time everything is broken into size one arrays that are in order when you recombine them into one large array

Merge sort comparision is around 183,000
The way merge sort works is it breaks everything into one sized arrays using recurssion. It then merges
the arrays into larger arrays and as it merges them it sorts them into the correct order.

