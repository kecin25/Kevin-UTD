Grab Parsing and edge case testing from project 1

make a structure called node that holds
{
	char draw= ' '
	node *NorthHolder=nullptr
	node *SouthHolder=nullptr
	node *EastHolder=nullptr
	node *WestHolder=nullptr
}


void recursive printing function(ostream &out, node*,node*)
delete grid function(body, temp)


int main()
{
	node *body=new node;
	node *head=body;
	node *temp=body;
	
	make a nested for loop that loops 50 times in the outer and inner loop
	{
	have body->right = new node
	move temp to new node
	temp->left = body
	body->right =temp
	}
	move temp and body back to start by setting them equal to head
	
	int row=0;
	
	make nested for loop, outer loop looping 50 times, same with inner but in outer loop have
	counter go up by one.
	in inner loop move body one to the right and have if statement
	if(row!=1)
	{
	body->up=temp
	temp->down=body
	move temp one to right
	}
	move body to first spot on 2nd row
	set left equal to nullptr
	then move one down, repeat till at end (48 times)
	
	then move body the the very last part of the grid (bottom right)
	set body->right=nullptr
	move up and repeat (49 times)
	
	this will make the edges point to nothing
	
	move temp and body back to head, body will be used to print function
	
	parse through file using project 1 parsing
	
	repeat until eof
	{
		if going north
		{
			loop temp=temp->north as many times as distance is
			
			if pen down
			at each part in loop set temp->print='*' if not bold, if bold use # instead
			if temp->print==# then do nothing else change it
		}
		if going east
		{
			loop temp=temp->east as many times as distance is
			
			if pen down
			at each part in loop set temp->print='*' if not bold, if bold use # instead
			if temp->print==# then do nothing else change it
		}
		if going south
		{
			loop temp=temp->south as many times as distance is
			
			if pen down
			at each part in loop set temp->print='*' if not bold, if bold use # instead
			if temp->print==# then do nothing else change it
		}
		if going west
		{
			loop temp=temp->west as many times as distance is
			
			if pen down
			at each part in loop set temp->print='*' if not bold, if bold use # instead
			if temp->print==# then do nothing else change it
		}
		if printing 
		{
			ask user if they want to print to file or console 
			if file then use ofstream else use cout when calling printing function
			printing function (either ofstream or cout, body, head)
		}
	}
	call function to delete grid
}
void recursive printing(ostream &out,body,head) 
{
	static int count=0
	static int row=0
	if (!(count==49))
	{
		out<<body->print
		body=body->right
		count++
		call function again
	}
	else
	{
		count=0
		row++
		if row==50
			{
			body=head
			return
			}
		elese
		{
			body=head
			for loop row times
			body=body->down
			call function again
		}
	}
}

void delete grid function(body, temp)
{
	nested for loops looping 50 times each
	
	big loop
	{
		small loop 1
		{
			body move one right
			delete temp
			set temp = to body
		}
		move body 1 down
		
		
		if big loop not on last run (big loop !=49)
		small loop 2
		{
			move body 1 right
		}
		temp = body
	}
	return
}